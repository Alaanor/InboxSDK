/* @flow */

import EventEmitter from '../lib/safe-event-emitter';
import Kefir from 'kefir';
import ComposeButtonView from './compose-button-view';

import type Membrane from '../lib/Membrane';
import type { Driver } from '../driver-interfaces/driver';
import type {
  ComposeViewDriver,
  ComposeNotice,
  StatusBar,
} from '../driver-interfaces/compose-view-driver';

// documented in src/docs/
declare export default class ComposeView extends EventEmitter {
  destroyed: boolean;

  constructor(
    driver: Driver,
    composeViewImplementation: ComposeViewDriver,
    membrane: Membrane
  ): ComposeView;
  addButton(buttonDescriptor: any): ComposeButtonView;
  addComposeNotice(composeNoticeDescriptor?: {
    height?: number,
    orderHint?: number,
  }): ComposeNotice;
  addStatusBar(statusBarDescriptor?: {
    height?: number,
    orderHint?: number,
    addAboveNativeStatusBar?: boolean,
  }): StatusBar;
  hideNativeStatusBar(): () => void;
  addRecipientRow(options: ?Object): { destroy(): void };
  forceRecipientRowsOpen(): () => void;
  hideNativeRecipientRows(): () => void;
  hideRecipientArea(): () => void;
  close(): void;
  send(options?: { sendAndArchive: boolean }): void;
  discard(): void;
  getMetadataForm(): HTMLElement;
  getSubjectInput(): HTMLInputElement;
  getBodyElement(): HTMLElement;
  // NOT DOCUMENTED BECAUSE NOT SURE IF API USERS NEED THIS
  // Not available after API v1
  // TODO remove?
  getComposeID(): string;
  getInitialMessageID(): string;
  /* deprecated, not available after API v1 */
  getMessageID(): string;
  getThreadID(): string;
  getDraftID(): Promise<string | null | void>;
  getCurrentDraftID(): Promise<string | null | void>;
  getHTMLContent(): string;
  getSelectedBodyHTML(): string | null | void;
  getSelectedBodyText(): string | null | void;
  getSubject(): string;
  getTextContent(): string;
  getToRecipients(): Contact[];
  getCcRecipients(): Contact[];
  getBccRecipients(): Contact[];
  insertTextIntoBodyAtCursor(text: string): HTMLElement | null | void;
  insertHTMLIntoBodyAtCursor(html: string): HTMLElement | null | void;
  insertLinkChipIntoBodyAtCursor(
    text: string,
    url: string,
    iconUrl: string
  ): HTMLElement | void;
  insertLinkIntoBodyAtCursor(
    text: string,
    url: string
  ): HTMLElement | null | void;
  isForward(): boolean;
  isInlineReplyForm(): boolean;
  isFullscreen(): boolean;
  setFullscreen(fullscreen: boolean): void;
  isMinimized(): boolean;
  setMinimized(minimized: boolean): void;
  setTitleBarColor(color: string): () => void;
  setTitleBarText(text: string): () => void;
  popOut(): Promise<ComposeView>;
  isReply(): boolean;
  setToRecipients(emails: string[]): void;
  setCcRecipients(emails: string[]): void;
  setBccRecipients(emails: string[]): void;
  getFromContact(): Contact;
  getFromContactChoices(): Contact[];
  setFromEmail(email: string): void;
  setSubject(text: string): void;
  setBodyHTML(html: string): void;
  setBodyText(text: string): void;
  attachFiles(files: Blob[]): Promise<void>;
  attachInlineFiles(files: Blob[]): Promise<void>;

  // Old alias that we should keep around until we're sure no one is using it.
  dragFilesIntoCompose(files: Blob[]): Promise<void>;

  //NOT DOCUMENTED BECAUSE STREAK-ONLY FOR NOW
  getElement(): HTMLElement;
  registerRequestModifier(
    modifier: (composeParams: {
      to: Array<Contact> | null,
      cc: Array<Contact> | null,
      bcc: Array<Contact> | null,
      body: string,
    }) => { body: string } | Promise<{ body: string }>
  ): void;
  replaceSendButton({ el: HTMLElement }): () => void;
  hideDiscardButton(): () => void;
  ensureFormattingToolbarIsHidden(): void;
  ensureAppButtonToolbarsAreClosed(): void;
  // TODO remove
  overrideEditSubject(): void;
}
