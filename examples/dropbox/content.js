// Generated by CoffeeScript 1.7.1
var EXTENSION_VERSION;

EXTENSION_VERSION = chrome.runtime.getManifest().version;

document.head.setAttribute("data-dropbox-version", EXTENSION_VERSION);

Promise.all([
  InboxSDK.load('1', SDK_APP_ID), InboxSDK.loadScript(DROPINS_URL), new Promise(function(resolve, reject) {
    return chrome.storage.local.get("guid", resolve);
  })
]).then(function(results) {
  var add_custom_attachment_card, get_link_previews, is_eligible_link, log, log_guid, log_key, sdk;
  sdk = results[0];
  log_guid = results[2].guid;
  log_key = new jsSHA(sdk.User.getEmailAddress(), "TEXT").getHash("SHA-1", "HEX");
  Dropbox.VERSION = 3;
  Dropbox.init({
    appKey: DROPINS_APP_KEY
  });
  log = function(event_name, extra) {
    if (extra == null) {
      extra = {};
    }
    return Util.log(event_name, log_guid, log_key, EXTENSION_VERSION, extra);
  };
  log("load");
  sdk.Compose.registerComposeViewHandler(function(compose_view) {
    var button;
    button = compose_view.addButton({
      title: chrome.i18n.getMessage("add_file"),
      iconUrl: chrome.runtime.getURL("images/logo.png"),
      type: 'MODIFIER',
      onClick: function() {
        var chooser, chooser_wrapper, modal;
        log("open_chooser");
        chooser = Dropbox.createChooserWidget({
          success: function(files) {
            var file, thumbnail_link;
            file = files[0];
            log("insert_link", {
              ext: Util.get_ext(file.name)
            });
            if (compose_view.getSelectedBodyText()) {
              compose_view.insertLinkIntoBodyAtCursor(file.name, file.link);
            } else {
              thumbnail_link = file.thumbnailLink;
              if (thumbnail_link) {
                thumbnail_link = thumbnail_link.split("?")[0] + "?bounding_box=75&mode=crop";
              } else {
                thumbnail_link = "" + CDN_BASE + "/static/images/gmail_attachment_logo.png";
              }
              compose_view.insertLinkChipIntoBodyAtCursor(file.name, file.link, thumbnail_link);
            }
            modal.close();
            Dropbox.cleanupWidget(chooser);
          },
          cancel: function() {
            modal.close();
            Dropbox.cleanupWidget(chooser);
          }
        });
        chooser_wrapper = document.createElement("iframe");
        chooser_wrapper.src = chrome.runtime.getURL("blank.html");
        chooser_wrapper.addEventListener("load", function() {
          chooser_wrapper.contentWindow.document.body.appendChild(chooser);
        }, false);
        chooser.style.width = chooser.style.height = "100%";
        chooser_wrapper.style.width = "640px";
        chooser_wrapper.style.height = "552px";
        chooser_wrapper.style.maxWidth = chooser.style.maxHeight = "100%";
        chooser_wrapper.style.border = "none";
        modal = sdk.Modal.show({
          el: chooser_wrapper,
          chrome: false
        });
        chooser_wrapper.parentElement.parentElement.style.borderRadius = "5px";
      }
    });
    chrome.storage.sync.get("seen_onboarding_tooltip", function(items) {
      if (!items.seen_onboarding_tooltip) {
        chrome.storage.sync.set({
          "seen_onboarding_tooltip": true
        });
        button.showTooltip({
          imageUrl: chrome.runtime.getURL("images/onboarding.png"),
          title: chrome.i18n.getMessage("tooltip_title"),
          subtitle: chrome.i18n.getMessage("tooltip_subtitle"),
          button: {
            title: chrome.i18n.getMessage("tooltip_button")
          }
        });
      }
    });
  });
  sdk.Conversations.registerMessageViewHandler(function(message_view) {
    var filtered_links, links;
    links = message_view.getLinksInBody();
    filtered_links = [];
    links.filter(is_eligible_link).forEach(function(link) {
      return filtered_links.push(link.href);
    });
    return get_link_previews(filtered_links, function(response) {
      var link_info, _i, _len, _results;
      if (response.length) {
        log("preview_render", {
          count: response.length
        });
      }
      _results = [];
      for (_i = 0, _len = response.length; _i < _len; _i++) {
        link_info = response[_i];
        _results.push(add_custom_attachment_card(message_view, link_info));
      }
      return _results;
    });
  });
  is_eligible_link = function(link) {
    return !link.isInQuotedArea && DBX_LINK_RE.test(link.href);
  };
  get_link_previews = function(links, callback) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.onload = function() {
      var error, resp;
      try {
        resp = JSON.parse(xhr.responseText);
        return callback(resp);
      } catch (_error) {
        error = _error;
      }
    };
    xhr.open("GET", ("" + DROPBOX_BASE + "/extension/check_links?links=") + encodeURIComponent(JSON.stringify(links)), true);
    xhr.send();
  };
  add_custom_attachment_card = function(message_view, link_info) {
    var buttons, ext, file_name, params, parts, path;
    path = link_info.link.split(/[?\#]/)[0];
    parts = path.split('/');
    file_name = decodeURIComponent(parts[parts.length - 1]);
    ext = Util.get_ext(file_name);
    params = {
      title: link_info.display_name || file_name,
      previewUrl: link_info.link,
      fileIconImageUrl: chrome.runtime.getURL('images/icon16.png'),
      foldColor: "#007EE5",
      description: link_info.description,
      previewOnClick: function() {
        log("preview_click", {
          ext: ext
        });
      }
    };
    buttons = [];
    if (link_info.dl_link != null) {
      buttons.push({
        downloadUrl: link_info.dl_link,
        onClick: function() {
          return log("download_link", {
            ext: ext
          });
        }
      });
    }
    if (link_info.allow_saver) {
      buttons.push({
        iconUrl: chrome.runtime.getURL('images/white_icon48.png'),
        tooltip: chrome.i18n.getMessage('saver_button_tooltip'),
        onClick: function() {
          log("open_saver", {
            ext: ext
          });
          Dropbox.save({
            files: [
              {
                url: link_info.link,
                filename: params.title
              }
            ],
            success: function() {},
            error: function(err) {
              log("save_failed", {
                ext: ext,
                error: err
              });
              alert(chrome.i18n.getMessage('saver_error'));
            }
          });
        }
      });
    }
    params['buttons'] = buttons;
    if (link_info.preview_link != null) {
      params['previewThumbnailUrl'] = link_info.preview_link;
      message_view.addAttachmentCardView(params);
    } else {
      params['iconThumbnailUrl'] = link_info.file_icon || chrome.runtime.getURL('images/icon128.png');
      message_view.addAttachmentCardViewNoPreview(params);
    }
  };
})["catch"](function(err) {
  console.error(err);
});
